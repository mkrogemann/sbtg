#!/usr/bin/env ruby


# CONSTANTS
SCRIPT_PATH = File.readlink($0)
IMAGE_PATH = File.join(File.dirname(SCRIPT_PATH), 'images')
FAILURE = 1
SUCCESS = 0


# SUPPORT FUNCTION
def find_candidates(test_name)
  return [test_name] if test_name.include?('.') # if we think it contains the package, just return as is
  test_folder = File.join(Dir.pwd, 'src', 'test', 'scala')
  candidates = []
  Dir.glob("#{test_folder}/**/*.scala") do |scala_test|
    filename = File.basename(scala_test, '.scala')
    candidates << package_and_class(scala_test, test_folder) if filename.include? test_name
  end
  candidates
end

def package_and_class(path, test_folder)
  package = path.sub(test_folder, '').gsub('/','.')
  package[1..-7]  # remove leading '.' and '.scala'
end

def user_selection(candidates)
  puts "Your input #{ARGV} is ambiguous. Please select from these candidates"
  candidates.each_with_index do |cand, idx|
    puts "#{idx} - #{cand}"
  end
  STDIN.gets.chomp.to_i
end

def growl(outcome, msg)
  image = outcome == FAILURE ? "#{IMAGE_PATH}/scalalogo-red.png" : "#{IMAGE_PATH}/scalalogo-green.png"
  growl_cmd = "growlnotify --image #{image} --name 'sbt' -t 'sbt ~ test' -m '#{msg}'"
  `#{growl_cmd}`
end


# MAIN
if ARGV.size == 1
  candidates = find_candidates(ARGV[0])
  if candidates.empty?
    puts "No test found that matches your input: #{ARGV}"
    exit 1
  elsif candidates.size == 1
    sbt_cmd = "sbt \'~ testOnly #{candidates.first}\'"
  else
    sbt_cmd = "sbt \'~ testOnly #{candidates[user_selection(candidates)]}\'"
  end
else
  sbt_cmd = "sbt \'~ test\'"
end

puts "Your input #{ARGV} translated to #{sbt_cmd}"

IO.popen(sbt_cmd) do |io|
  while(line = io.gets)

    # ScalaTest 2.0
    if line.match /All tests passed/
      puts line
      growl SUCCESS, 'All tests passed.'
    elsif line.match /TEST FAILED/
      puts line
      growl FAILURE, 'Tests failed.'

    # Specs / Specs2
    elsif line.match /Passed\:/
      puts line
      growl SUCCESS, 'All tests passed.'

    # General stuff (eg compilation)
    elsif line.match /Compilation failed/
      puts line
      growl FAILURE, 'Compilation failed! Tests were not run.'

    # Everything else just print out
    else
      puts line
    end
  end
end
